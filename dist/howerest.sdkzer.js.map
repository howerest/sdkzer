{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"js-webservices\"","webpack:///./src sync","webpack:///./src/howerest.sdkzer.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","js","webservices","webpackEmptyContext","req","e","Error","code","keys","resolve","id","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","js_webservices_1","require","Sdkzer","attrs","attrKey","this","invalidMessages","syncing","lastResponse","pAttrs","setDefaults","configure","options","length","push","WebServices","HttpHeader","usingRestfulCrudHttpPattern","usingCustomHttpPattern","usingParentsFetchStrategy","getHttpQueryGuessConfigFor","operation","defaults","isValid","_i","attrs_1","attrName","validate","toValidateAttr","validationRule","toValidateAttrs_1","validationRules","_a","_b","invalidMessage","attr","undefined","attrKeys","split","attrValue","attrKeyName","eval","join","baseEndpoint","resourceEndpoint","isNew","hasChanged","changedAttrs","hasAttrChanged","i2","currAttrs","prevAttrs","previousAttrs","prevValue","fetch","httpQuery","camelize","promise","_this","query","HttpQuery","httpMethod","endpoint","headers","DEFAULT_HTTP_HEADERS","qsParams","data","Merger","mergeHttpQueries","HttpRequest","then","response","parsedData","$parse","Promise","reject","dataPrefixKey","toOriginJSON","toOriginXML","toOrigin","format","save","httpHeaders","destroy","fetchIndex","instance","instances","error","fetchOne","model","HTTP_PATTERN","PARENTS_FETCH_STRATEGY","HTTP_QUERY_GUESS_CONFIG","restful_crud","read_collection","verb","read_record","create_record","update_record","delete_record"],"mappings":"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","file":"howerest.sdkzer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","module.exports = js-webservices;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1;","/* --------------------------------------------------------------------------\n\n    howerest 2018 - <hola@davidvalin.com> | www.howerest.com\n\n    Apache 2.0 Licensed\n    -------------------\n\n    Implements a standarized & friendly API to deal with RESTful http resources\n    that implement endpoints to perform the CRUD operations\n\n    1. Define a resource:\n    2. Start consuming your resource\n\n--------------------------------------------------------------------------- */\n\nimport { WebServices } from \"js-webservices\";\nimport { ValidationRule } from \"./validation_rule\";\n\nexport class Sdkzer {\n\n  private attrs:Object;\n  private pAttrs:Object;\n  private validationRules:Object;\n  private invalidMessages:Object = {};\n  public syncing:boolean = false;\n  public lastResponse:WebServices.HttpResponse = null;\n\n  // Configuration\n  private static DEFAULT_HTTP_HEADERS:WebServices.HttpHeader[] = [];\n  private static HTTP_PATTERN:String = 'restful_crud';\n  private static PARENTS_FETCH_STRATEGY:String = 'none';\n  private static HTTP_QUERY_GUESS_CONFIG:Object = {\n    \"restful_crud\": {\n      \"read_collection\" : {\n        verb: \"GET\",\n        endpoint: ''   },\n      \"read_record\" :     {\n        verb: \"GET\",\n        endpoint: ''   },\n      \"create_record\" :   {\n        verb: \"GET\",\n        endpoint: ''   },\n      \"update_record\":    {\n        verb: \"GET\",\n        endpoint: ''   },\n      \"delete_record\":    {\n        verb: \"GET\",\n        endpoint: ''   }\n    }\n  }\n\n\n  /**\n   * Creates an instance of a model entity with an API to communicate with\n   * a resource (http RESTful resource)\n   * @param  {Object}   attrs   The initial attributes for the resource.\n   *                            Those attributes are in force to defaults()\n   */\n  public constructor(attrs:Object = {}) {\n    this.attrs = { id: null };\n    this.pAttrs = { id: null };\n\n    this.setDefaults();\n\n    for (let attrKey in attrs) {\n      // Object initialization parameters are in force to default parameters\n      this.attrs[attrKey] = attrs[attrKey];\n      this.pAttrs[attrKey] = attrs[attrKey];\n    }\n  }\n\n\n  /**\n   * Configures Sdkzer constants that determine the behaviour of Sdkzer in all\n   * classes that extend from Sdkzer in the current scope.\n   * @param options {ISdkzerConfigOptions} The configuration options\n   */\n   public static configure(options:ISdkzerConfigOptions) : void {\n     if (options['defaultHttpHeaders']) {\n       Sdkzer['DEFAULT_HTTP_HEADERS'] = [];\n       for (let i = 0; i < options['defaultHttpHeaders'].length; i++) {\n         Sdkzer['DEFAULT_HTTP_HEADERS'].push(new WebServices.HttpHeader(options['defaultHttpHeaders'][i]));\n       }\n     }\n     // Sdkzer['HTTP_PATTERN'] = options['httpPattern'] ? options['httpPattern'] : this['HTTP_PATTERN'];\n     // Sdkzer['PARENTS_FETCH_STRATEGY'] = options['parentsFetchStrategy'] ? options['parentsFetchStrategy'] : this['PARENTS_FETCH_STRATEGY'];\n     // Sdkzer['HTTP_QUERY_GUESS_CONFIG'] = options['httpQueryGuessConfig'] ? options['httpQueryGuessConfig'] : this['HTTP_QUERY_GUESS_CONFIG'];\n   }\n\n\n   /**\n    * Checks if Sdkzer has been configured to communicate to RESTful resources\n    */\n   private static usingRestfulCrudHttpPattern() : Boolean {\n     return (Sdkzer['HTTP_PATTERN'] === 'restful_crud' ? true : false);\n   }\n\n\n   /**\n    * Checks if Sdkzer has been configured to communicate using custom CRUD endpoints\n    */\n   private static usingCustomHttpPattern() : Boolean {\n     return (Sdkzer['HTTP_PATTERN'] !== 'restful_crud' ? true : false);\n   }\n\n\n   /**\n    * Checks if Sdkzer is using any fetch strategy once received parent ids\n    */\n   private static usingParentsFetchStrategy() : Boolean {\n     return Sdkzer['PARENTS_FETCH_STRATEGY'] !== 'none' ? true : false;\n   }\n\n\n   /**\n    * Retrieves the http guess config for an specific CRUD operation.\n    * @param {String} operation  Accepts \"create\", \"read\", \"update\" and \"delete\"\n    */\n   private static getHttpQueryGuessConfigFor(operation:String) : Object {\n     if (Sdkzer.usingRestfulCrudHttpPattern()) {\n       return Sdkzer['HTTP_QUERY_GUESS_CONFIG']['restful_crud'];\n     } else {\n       return Sdkzer['HTTP_QUERY_GUESS_CONFIG']['custom'];\n     }\n   }\n\n\n  /**\n   * Sets the defaults() values in the instance attributes\n   */\n  public setDefaults() : void {\n    if (this.defaults()) {\n      let defaults = this.defaults();\n      for (let attrKey in defaults) {\n        this.attrs[attrKey] = defaults[attrKey];\n      }\n    }\n  }\n\n\n  /**\n   * Retrieves the defaults for the entity. Override it using your default\n   * attributes if you need any\n   */\n  public defaults() : Object {\n    return {};\n  }\n\n  /**\n   * Checks wether an entity is a valid entity.\n   * It doesn't perform validation (check validate())\n   */\n  public isValid() : boolean {\n    const attrs = Object.keys(this.invalidMessages);\n    for(const attrName of attrs) {\n      if (this.invalidMessages[attrName] && this.invalidMessages[attrName].length > 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Checks wether an entity is a valid entity\n   */\n  public validate() : void {\n    let isValid = true, toValidateAttr, validationRule;\n    const toValidateAttrs = Object.keys(this.validationRules);\n\n    // Validate attribute's ValidationRules\n    for(toValidateAttr of toValidateAttrs) {\n      for(validationRule of this.validationRules[toValidateAttr]) {\n        if (!validationRule.isValid(this.pAttrs[toValidateAttr], this.attrs[toValidateAttr])) {\n          if (!this.invalidMessages[toValidateAttr]) {\n            this.invalidMessages[toValidateAttr] = [];\n          }\n          this.invalidMessages[toValidateAttr].push(validationRule.invalidMessage);\n        } else {\n          this.invalidMessages[toValidateAttr] = [];\n        }\n      }\n    }\n  }\n\n  /**\n   * This method can do 3 different things:\n   *\n   * - 1) Reads all attributes. When called as instance.attr()\n   * - 2) Read one attribute. When called as instance.attr('name')\n   * - 3) Set one attribute. When called as instance.attr('name', 'Bruce Lee')\n   *\n   * It's recommended to use this method instead of accessing to attr attribute\n   * directly. This allows you to execute logic before and after setting or\n   * reading attributes. Also, instead of creating 100 setters and getters,\n   * we use a single attr() method\n   *\n   * @param attrName  The attribute name that we want to read or set\n   * @param value     The attribute value that we want to set for \"attrName\"\n   */\n   public attr(attrName?: string, value?: any) : Object|void {\n     // Setting an attribute?\n     if (attrName !== undefined && value !== undefined) {\n       // TODO: Add before&after-callback\n       let attrKeys = attrName.split('.');\n       let attrKeyName = '';\n       eval(\"this.attrs['\"+attrKeys.join(\"']['\")+\"'] = \" + (typeof(value) === 'string' ? \"'\"+value+\"'\" : value));\n     } else if (attrName !== undefined && value === undefined) {\n       // Reading an attribute?\n       let attrKeys = attrName.split('.');\n       let attrValue = this.attrs[attrName.split('.')[0]];\n       for (let i = 1; i < attrKeys.length; i++) {\n         attrValue = attrValue[attrKeys[i]];\n       }\n       return attrValue;\n     } else {\n       // Reading all attributes?\n       // TODO: Add before&after-callbacks\n       return this.attrs;\n     }\n   }\n\n\n  /**\n   * Retrieves the base resource url. Override it using your base endpoint\n   * for your resource.\n   *\n   * NOTE: You need to define a baseEndpoint method in your entities\n   *  in order to be able to sync with a backend endpoint\n   *  A base endpoint for a RESTful endpoint look like:\n   *    return \"https://www.an-api.com/v1/users\"\n   */\n  public baseEndpoint() : string {\n\n    return null;\n  }\n\n\n  /**\n   * Retrieves the resource url\n   * NOTE: This method will become the interface to connect using different\n   * http patterns\n   */\n  public resourceEndpoint() : String {\n    return '';\n  }\n\n\n  /**\n   * Checks if the record is not saved in the origin. An record will be\n   * consiered new when it has an \"id\" attribute set to null and it lacks of\n   * a \"lastResponse\" attribute value\n   */\n  public isNew() : Boolean {\n    return ((this.attrs['id'] !== null && this.lastResponse !== null) ? false : true);\n  }\n\n\n  /**\n   * Checks if the record has changed since the last save\n   */\n  public hasChanged() : Boolean {\n    return (this.changedAttrs().length > 0 ? true : false);\n  }\n\n\n  /**\n   * Checks if an attribute has changed from the origin\n   */\n  public hasAttrChanged(attrName:string) : Boolean {\n    let i, changedAttrs = this.changedAttrs();\n\n    for (i = 0; i < changedAttrs.length; i++) {\n      if (changedAttrs[i] === attrName) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n\n  /**\n   * Retrieves the name of the changed attributes since the last save\n   */\n  public changedAttrs() : Array<String> {\n    let changedAttrs = [],\n        currAttrs = Object.keys(this['attrs']),\n        prevAttrs = Object.keys(this['pAttrs']),\n        i, i2;\n\n    for (i=0; i <= currAttrs.length; i++) {\n      for (i2=0; i2 <= prevAttrs.length; i2++) {\n        if (currAttrs[i] !== null && currAttrs[i] === prevAttrs[i2] && this.attrs[currAttrs[i]] !== this.pAttrs[prevAttrs[i2]]) {\n          changedAttrs.push(currAttrs[i]);\n          break;\n        }\n      }\n    }\n\n    return changedAttrs;\n  }\n\n\n  /**\n   * Retrieves the previous attributes\n   */\n  public prevAttrs() : Object {\n    let previousAttrs = {};\n    for (let attrKey in this.attrs) {\n      if (this.pAttrs[attrKey] !== this.attrs[attrKey]) {\n        previousAttrs[attrKey] = (this.pAttrs[attrKey] ? this.pAttrs[attrKey] : null);\n      }\n    }\n\n    return previousAttrs;\n  }\n\n\n  /**\n   * Retrieves the previous value prior to last save for a specific attribute\n   */\n  public prevValue(attrName:string) : any {\n    return this.prevAttrs()[attrName];\n  }\n\n\n  /**\n   * Fetches the newest attributes from the origin.\n   */\n  public fetch(httpQuery?:WebServices.HttpQuery, camelize: Boolean = true) : Promise<WebServices.HttpResponse> {\n    let _this = this,\n        promise;\n\n    if (this.attrs['id']) {\n      this.syncing = true;\n\n      let query = new WebServices.HttpQuery({\n        httpMethod: \"GET\",\n        endpoint:   this.baseEndpoint() + '/' + this.attrs['id'],\n        headers:    Sdkzer.DEFAULT_HTTP_HEADERS ? Sdkzer.DEFAULT_HTTP_HEADERS : [],\n        qsParams:   {},\n        data:       {}\n      });\n\n      if (typeof(httpQuery) !== 'undefined') {\n        query = WebServices.Merger.mergeHttpQueries([ query, httpQuery ]);\n      }\n\n      let request = new WebServices.HttpRequest(query);\n      promise = request.promise;\n      promise.then(\n        // Success\n        (response) => {\n          _this.syncing = false;\n\n          // TODO: Keep lastResponse\n          let parsedData = _this.$parse(response.data);\n\n          if (camelize) {\n            // parsedData = util.Camel.camelize(parsedData);\n          }\n          // Keep track of previous attributes\n          _this.pAttrs = parsedData;\n          // Assign the parsed attributes\n          _this.attrs = parsedData;\n        },\n        // Fail\n        (response) => {\n          _this.syncing = false;\n        }\n      );\n    }\n\n    if (typeof(promise) === 'undefined') {\n      promise = Promise.reject(false);\n    }\n\n    return promise;\n  }\n\n\n  /**\n   * Parses the resources data from an incoming HttpResponse\n   * The idea is to return the resources attributes exclusively\n   */\n  public $parse(data:Object, dataPrefixKey?:string) : Object {\n    if (dataPrefixKey !== null && data[dataPrefixKey]) {\n      return data[dataPrefixKey];\n    } else {\n      return data;\n    }\n  }\n\n\n  /**\n   * Transforms the local attributes to be processed by the origin in JSON format\n   */\n  public toOriginJSON() : Object {\n    return this.attrs;\n  }\n\n\n  /**\n   * Transforms the local attributes to be processed by the origin in XML format\n   */\n  public toOriginXML() : String {\n    // TODO: Implement\n    return '';\n  }\n\n\n  /**\n   * Transforms the local attributes to be processed by the origin in a specific format\n   */\n  public toOrigin(format:string) : Object|String {\n    switch(format) {\n      case 'json':\n        this.toOriginJSON();\n        break;\n     case 'xml':\n       this.toOriginXML();\n       break;\n    }\n\n    return this.attrs;\n  }\n\n\n  /**\n   * Saves the local object into the origin\n   */\n  public save(httpHeaders:WebServices.HttpHeader[] = []) : Promise<WebServices.HttpResponse> {\n    let _this =  this,\n        query,\n        request,\n        httpMethod = (this.attr('id') == null ? \"POST\" : \"PUT\");\n\n    // New record in the origin?\n    if (httpMethod==\"POST\") {\n      query = new WebServices.HttpQuery({\n        httpMethod: httpMethod,\n        endpoint:   this.baseEndpoint(),\n        headers:    Sdkzer.DEFAULT_HTTP_HEADERS ? Sdkzer.DEFAULT_HTTP_HEADERS : [],\n        qsParams:   {},\n        data:       this.toOriginJSON()\n      });\n\n    // Existing record in the origin?\n    } else {\n      query = new WebServices.HttpQuery({\n        httpMethod: httpMethod,\n        endpoint:   this.baseEndpoint()+'/'+this.attrs['id'],\n        headers:    Sdkzer.DEFAULT_HTTP_HEADERS ? Sdkzer.DEFAULT_HTTP_HEADERS : [],\n        qsParams:   {},\n        data:       this.toOriginJSON()\n      });\n    }\n\n    request = new WebServices.HttpRequest(query);\n    return request.promise.then(\n      // Success\n      (response) => {\n        if (httpMethod==\"POST\") {\n          // Append id to attributes\n          _this.attrs['id'] = response.data['id'];\n        }\n        _this.lastResponse = response;\n      }\n    );\n  }\n\n\n  /**\n   * Destroys the current record in the origin\n   */\n  public destroy() : Promise<any> {\n    let query,\n        request;\n\n    query = new WebServices.HttpQuery({\n      httpMethod: \"DELETE\",\n      endpoint:   this.baseEndpoint()+'/'+this.attrs['id'],\n      headers:    Sdkzer.DEFAULT_HTTP_HEADERS ? Sdkzer.DEFAULT_HTTP_HEADERS : [],\n      qsParams:   {},\n      data:       {}\n    });\n    request = new WebServices.HttpRequest(query);\n    return request.promise;\n  }\n\n\n  /**\n   * Retrieves a collection of records from the origin\n   */\n  public static fetchIndex(httpQuery?:WebServices.HttpQuery) : Promise<Array<any>> {\n    let query,\n        request,\n        instancesPromise,\n        instances = [],\n        instance;\n\n    instancesPromise = new Promise((resolve, reject) => {\n      query = new WebServices.HttpQuery({\n        httpMethod: \"GET\",\n        endpoint:   (new this().baseEndpoint()),\n        headers:    Sdkzer.DEFAULT_HTTP_HEADERS ? Sdkzer.DEFAULT_HTTP_HEADERS : [],\n        qsParams:   {},\n        data:       {}\n      });\n\n      if (typeof(httpQuery) !== 'undefined') {\n        query = WebServices.Merger.mergeHttpQueries([ query, httpQuery ]);\n      }\n\n      request = new WebServices.HttpRequest(query);\n      request.promise.then((response) => {\n        for(let i in response.data) {\n          instance = new this();\n          instance.attrs = instance.pAttrs = instance.$parse(response.data[i]);\n          instances.push(instance);\n        }\n        resolve(instances);\n      }, (error) => {\n        reject(error);\n      });\n    });\n\n    return instancesPromise;\n  }\n\n\n  /**\n   * Retrieves a single record from the origin\n   * @param id          The record id that we want to fetch by\n   * @param httpQuery   Use a HttpQuery instance to override the default query\n   */\n  public static fetchOne(id: Number, httpQuery?:WebServices.HttpQuery) : Promise<any>  {\n    let model = new this(),\n        query,\n        request,\n        instancePromise,\n        instance;\n\n    instancePromise = new Promise((resolve, reject) => {\n      query = new WebServices.HttpQuery({\n        httpMethod: \"GET\",\n        endpoint:   model.baseEndpoint()+'/'+id,\n        headers:    Sdkzer.DEFAULT_HTTP_HEADERS ? Sdkzer.DEFAULT_HTTP_HEADERS : [],\n        qsParams:   {},\n        data:       {}\n      });\n\n      if (typeof(httpQuery) !== 'undefined') {\n        query = WebServices.Merger.mergeHttpQueries([ query, httpQuery ]);\n      }\n\n      request = new WebServices.HttpRequest(query);\n      request.promise.then((response) => {\n        instance = new this();\n        instance.attrs = instance.pAttrs = instance.$parse(response.data);\n        resolve(instance);\n      }, (error) => {\n        reject(error);\n      });\n    });\n    return instancePromise;\n  }\n}\n\nexport interface ISdkzerConfigOptions {\n  defaultHttpHeaders:string;\n  // httpPattern?:String;\n  // parentsFetchStrategy?:String;\n  // httpQueryGuessConfig?:IHttpQueryGuessConfig;\n}\n\nexport interface IHttpQueryGuessConfig {\n  restful:Object;\n}\n"],"sourceRoot":""}